#!/usr/bin/env ruby
# encoding: utf-8

require 'thor'
require 'ruby-plsql'
require 'redis'
require 'net-ldap'
require 'awesome_print'
require 'digest/sha1'
require 'json'
#require 'pry'
require 'active_support'
require 'active_support/core_ext'
require 'base64'
require 'securerandom'
#require 'pry'

class SyncAccountsLDAP < Thor

  SERVICE = self.name
  LDAP_CHECKSUM_SET = 'accounts_ldap:s_checksum_ldap_accounts_ldap'
  LDAP_UID_SET      = 'accounts_ldap:s_uid_ldap_accounts_ldap'
  LDAP_DN_BY_UID_HASH = 'accounts_ldap:h_dn_by_uid'
  UMT_CHECKSUM_SET  = 'accounts_ldap:s_checksum_umt'
  UMT_UID_SET       = 'accounts_ldap:s_uid_umt'
  UMT_ACCOUNT_BY_UID_HASH  = 'accounts_ldap:h_accounts_by_uid'
  UMT_ACCOUNT_BY_CHECKSUM_HASH  = 'accounts_ldap:h_accounts_by_checksum'
  UMT_COURSE_OF_STUDY = 'accounts_ldap:h_course_of_study'

  desc 'new','add all missing accounts to the ldap'
  def new
    cleanup_redis_db
    puts "Redis DB bereinigt"

    # this list must be fetched _before_ we are going to fetch the accounts
    fetch_idm
    puts "IDM eingelesen"
    fetch_ldap
    puts "LDAP eingelesen"

    counter = 0
    missing_entries.each do |uid|
      counter += 1
      puts "#{counter}: #{uid}"

      write_new_entry uid
    end

    puts "Es wurden #{counter} neue Eintraege geschrieben"
  end

  desc "update","update ldap accounts"
  def update
    cleanup_redis_db

    fetch_idm
    fetch_ldap

    unless 0 == missing_entries.size
      puts "[ERROR] there are missing entries left."
      puts "[ERROR] run 'sync_ad_itz new' first"
      exit
    end

    counter = 0
    update_candidates.each do |checksum|
      counter += 1
      write_update_entry checksum
    end

    puts "Es wurden #{counter} Eintraege erneuert"
  end

  desc "delete","delete obsolete ldap accounts"
  def delete
    puts "Bin in der richtigen Funktion"
    # cleanup_redis_db

    fetch_course_of_study_list
    puts "study list gefetched"
    fetch_idm
    fetch_ldap

    puts "Eintraege abgeholt"

    # unless 0 == obsolete_entries.size
    #   puts "[ERROR] there are missing entries left."
    #   puts "[ERROR] run 'sync_accounts_ldap new' first"
    #   exit
    # end

    counter = 0
    puts "Anzahl loeschbarer Accounts: #{obsolete_entries.size}"
    # obsolete_entries.each do |uid|
    #   counter += 1
    #   delete_entry uid
    # end

    puts "Es wurden #{counter} Eintraege geloescht"
  end

private
  def connect_redis
    @redis = Redis.new
  end

  def connect_idm
    plsql.connection ||= OCI8.new \
      ENV['IDM_USERNAME'],
      ENV['IDM_PASSWORD'],
      ENV['IDM_SID']
  end

  def connect_ldap
    unless @ldap
      @ldap ||= Net::LDAP.new
      @ldap.host = ENV['LDAP1_ITZ_HOST']
      @ldap.port = 636
      @ldap.encryption :simple_tls
      @ldap.auth ENV['LDAP1_ITZ_USER'], ENV['LDAP1_ITZ_PASSWORD']
    end
  end

  def cleanup_redis_db
    connect_redis
    @redis.del LDAP_CHECKSUM_SET
    @redis.del LDAP_UID_SET
    @redis.del LDAP_DN_BY_UID_HASH
    @redis.del UMT_CHECKSUM_SET
    @redis.del UMT_UID_SET
    @redis.del UMT_ACCOUNT_BY_CHECKSUM_HASH
    @redis.del UMT_ACCOUNT_BY_UID_HASH
    @redis.del UMT_COURSE_OF_STUDY
  end

  def fetch_idm
    connect_idm
    connect_redis

    records = nil
    plsql.ad_itz_pkg.getAccounts { |cursor| records = cursor.fetch_all }

    records.each do |record|
      checksum = build_checksum record[0..5]

      entry = {
        lastname:     record[0],
        firstname:    record[1],
        nkz:          record[2],
        mail:         record[3],
        uidNumber:    record[5],
        userPassword: record[7],
        checksum:     checksum
      }

      @redis.hmset(
        UMT_ACCOUNT_BY_CHECKSUM_HASH,
        checksum,
        entry.to_json)

      @redis.hmset(
        UMT_ACCOUNT_BY_UID_HASH,
        entry[:nkz],
        entry.to_json)

      @redis.sadd UMT_CHECKSUM_SET, checksum
      @redis.sadd UMT_UID_SET, entry[:nkz]
    end
  end

  def fetch_ldap
    connect_ldap
    connect_redis

    filter = Net::LDAP::Filter.eq 'uid','*'
    basedn = 'ou=accounts,o=mlu,c=de'
    attr = ['carLicense','uid','dn']

    protected_user = []

    @ldap.search(base: basedn, filter: filter, attributes: attr) do |entry|
      unless entry[:carLicense].empty?
        @redis.sadd LDAP_CHECKSUM_SET,entry[:carLicense][0]
      end
      @redis.sadd LDAP_UID_SET,entry[:uid][0]
      @redis.hset LDAP_DN_BY_UID_HASH, entry[:uid][0], entry[:dn][0]
    end
  end
  
  # Loeschen eines Eintrages
  #
  def delete_entry uid
    connect_ldap
    connect_redis

    dn = get_personal_dn uid
    puts dn

    # unless @ldap.delete dn: dn
    #   puts "Result: #{@ldap.get_operation_result.code}"
    #   puts "Message: #{@ldap.get_operation_result.message}"
    # end
  end

  # Schreiben eines neuen Eintrages
  #
  # Ein neuer Eintrag muss in mehreren Schritten eingetragen werden
  #   1. Eintrag aller Grunddaten, als disabled account (useraccountcontrol 514)
  #   2. Eintrag des Passwortes des Accounts
  #   3. Aktivierung des Accounts, Passwort lÃ¤uft nie ab
  #      (useraccountcontrol 66046)
  def write_new_entry uid
    connect_ldap
    connect_redis
    entry = JSON.parse(
      @redis.hget UMT_ACCOUNT_BY_UID_HASH, uid).
      symbolize_keys

    dn = "uid=#{entry[:nkz]},ou=accounts,o=mlu,c=de"
    attributes = {
      uid:           entry[:nkz],
      sn:            entry[:lastname],
      givenname:     entry[:firstname],
      cn:            "#{entry[:firstname]} #{entry[:lastname]}",
      carlicense:    entry[:checksum],
      mail:          "#{entry[:mail]}",
      userPassword:  Net::LDAP::Password.generate(:sha, entry[:userPassword]),
      objectClass: [
        "top",
        "person",
        "inetOrgPerson"
      ]
    }

    unless @ldap.add dn: dn, attributes: attributes
      puts "Result: #{@ldap.get_operation_result.code}"
      puts "Message: #{@ldap.get_operation_result.message}"
    end
  end

  def write_update_entry checksum
    entry = get_account_by_checksum checksum

    dn = get_personal_dn entry[:nkz]

    operations = [
      [:replace, :givenname, entry[:firstname]],
      [:replace, :sn, entry[:lastname]],
      [:replace, :mail, entry[:mail]],
      [:replace, :cn, "#{entry[:firstname]} #{entry[:lastname]}"],
      [:replace, :carlicense, entry[:checksum]]
    ]

    unless @ldap.modify dn: dn, operations: operations
      puts "Result: #{@ldap.get_operation_result.code}"
      puts "Message: #{@ldap.get_operation_result.message}"
    end

    puts "Eintrag geschrieben: #{entry[:nkz]}"
  end

  def get_account_by_checksum checksum
    JSON.parse(
      @redis.hget UMT_ACCOUNT_BY_CHECKSUM_HASH, checksum).
      symbolize_keys
  end

  def get_personal_dn uid
    @redis.hget LDAP_DN_BY_UID_HASH, uid
  end

  def missing_entries
    @redis.sdiff UMT_UID_SET, LDAP_UID_SET
  end

  def obsolete_entries
    @redis.sdiff LDAP_UID_SET, UMT_UID_SET
  end

  def update_candidates
    @redis.sdiff UMT_CHECKSUM_SET, LDAP_CHECKSUM_SET
  end

  def build_checksum hash
    Digest::SHA1.hexdigest(
      hash.inject('') {|string,item| string + item.to_s})
  end
end

SyncAccountsLDAP.start
